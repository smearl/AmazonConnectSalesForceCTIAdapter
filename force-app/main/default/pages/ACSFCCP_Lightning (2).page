<!--  You must have an AWS account to use the Amazon Connect CTI Adapter.
Downloading and/or using the Amazon Connect CTI Adapter is subject to the terms of the AWS Customer Agreement,
AWS Service Terms, and AWS Privacy Notice.

Â© 2017, Amazon Web Services, Inc. or its affiliates. All rights reserved.

NOTE:  Other license terms may apply to certain, identified software components
contained within or distributed with the Amazon Connect CTI Adapter if such terms are
included in the LibPhoneNumber-js and Salesforce Open CTI. For such identified components,
such other license terms will then apply in lieu of the terms above.

** libphonenumber-js; version 0.4.2 / 30.03.2017 -- https://github.com/catamphetamine/libphonenumber-js
Copyright (c) 2016 @catamphetamine

(The MIT License)

Copyright (c) 2016 @catamphetamine

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

========== Toolkit for Amazon Connect modifications ==========


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

========== Toolkit for Amazon Connect modifications ==========
Copyright (c) 2018 VoiceFoundry, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<apex:page id="ACSFCCP_Lightning" controller="ACSFCCP_NamespaceController" extensions="ACSFCCP_CallInformationController" showHeader="false" applyHtmlTag="false" applyBodyTag="false">
  <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" lang="en" >

    <apex:slds />

    <apex:remoteObjects >
      <apex:remoteObjectModel name="ServicePresenceStatus" fields="Id, DeveloperName, MasterLabel" />
      <apex:remoteObjectModel name="Call_Attributes_Configuration__mdt" fields="Id" jsShorthand="Call_Attributes_Configuration">
        <apex:remoteObjectField name="Attribute_Name__c" jsShorthand="Attribute_Name"/>
        <apex:remoteObjectField name="CCP_Attribute_Label__c" jsShorthand="CCP_Attribute_Label"/>
      </apex:remoteObjectModel>
      <apex:remoteObjectModel name="Call_Campaign__c" fields="Id" jsShorthand="Call_Campaign">
        <apex:remoteObjectField name="Phone_Number__c" jsShorthand="Phone_Number"/>
        <apex:remoteObjectField name="Account__c" jsShorthand="Account"/>
        <apex:remoteObjectField name="Contacsf__c" jsShorthand="Contact"/>
        <apex:remoteObjectField name="Lead__c" jsShorthand="Lead"/>
        <apex:remoteObjectField name="Opportunity__c" jsShorthand="Opportunity"/>
        <apex:remoteObjectField name="Case__c" jsShorthand="Case"/>
      </apex:remoteObjectModel>
    </apex:remoteObjects>

    <apex:includeScript value="/support/api/41.0/lightning/opencti_min.js"/>

    <apex:includeScript value="{!$Resource.amazonconnect__amazonconnectjs121}"/>
    <apex:includeScript value="{!$Resource.amazonconnect__libphonenumberjs}"/>
    <apex:includeScript value="{!$Resource.acsf_callattributesdisplay}"/>
    <apex:includeScript value="{!$Resource.acsf_callinformation}" />
    <apex:includeScript value="{!$Resource.acsf_screenpopmanager}" />
    <apex:includeScript value="{!$Resource.acsf_postcalltask}" />

    <style>
        body {background-color:#F2F2F2; border:none;}
        #outercontainer {
            justify-content: center;
            text-align: center;
            vertical-align: middle;
            align-items: center;
            margin: 0 auto;
            border: none;
            padding:0;
        }
        #connectcontainer {
            width: 1px;
            height: 1px;
            justify-content: center;
            align-items: center;
            border: none;
         }
         #callAttributesBadge: {
           top: 195px;
           left:5px;
           position: absolute;
         }
         #callAttributesBadge {
           top: 42px;
           left: 10px;
           position: absolute;
           cursor: pointer;
         }
         #callAttributesPopover {
           top: 75px;
           left:5px;
           position: absolute;
           width:95%;
           min-width: initial;
           max-height: 170px;
         }

         .slds-scope .slds-table td, .slds-scope .slds-table th {
           padding: 0px;
         }

        .hidden {
          display: none;
        }
        .round-button{
          display:block
        }
    </style>

    <body>

    <div id="outercontainer">
      <div class="slds-scope">
        <div id="ccpSoftphoneLogin" class="ccpSoftphone ccpLogin slds-align_absolute-center slds-hide" style="margin-top: 200px">
          <button id="loginButton" class="slds-button slds-button_brand">Sign in to CCP</button>
        </div>
        <div id="callAttributesBadge" class="slds-badge hidden">Attributes</div>
        <div id="callAttributesPopoverContainer" class="hidden">
          <section id="callAttributesPopover" class="slds-popover slds-nubbin_top-left slds-popover_small" role="dialog" aria-label="Dialog Title" aria-describedby="dialog-body-id-1">
            <div class="slds-popover__body" id="dialog-body-id-1">
              <table class="slds-table slds-table_striped">
                <thead>
                <tr class="slds-text-title_caps">
                  <th scope="col">
                    <div class="slds-truncate">{!$Label.ACSFCCP_CallAttributeKey}</div>
                  </th>
                  <th scope="col">
                    <div class="slds-truncate">{!$Label.ACSFCCP_CallAttributeValue}</div>
                  </th>
                </tr>
                </thead>
                <tbody id="callAttributesList">
                </tbody>
              </table>
            </div>
          </section>
        </div>
        <div id="transferBtn" class="slds-hint-parent hidden" style="position:absolute; top:240px; right:10px;">
          <button class="slds-button slds-button_icon slds-button_icon-border-filled" title="{!$Label.ACSFCCP_Store_Call_Information}">
            <svg class="slds-button__icon slds-button__icon_hint" aria-hidden="true">
              <use  xlink:href="{!URLFOR($Asset.SLDS, '/assets/icons/standard-sprite/svg/symbols.svg#record')}" ></use>
            </svg>
            <span class="slds-assistive-text">{!$Label.ACSFCCP_Store_Call_Information}</span>
          </button>
        </div>
      </div>
      <div id="connectcontainer"></div>
    </div>

    </body>

    <script type="text/javascript">
      (function(ctx) {
        /** December 6, 2017
         * The following 4 lines of code are a work around for a rendering issue in Chrome when using the Salesforce
         * Lightning Service Console. This code should eventually be removed once the problem is fixed.
         */
        setInterval(function () {
          var iframe = document.getElementById('connectcontainer').children[0];
          iframe.style.display = iframe.style.display ? '' : 'block';
        }, 750);

        var ccSettings = null;
        var connectCW = null;
        var connectCH = null;
        var connectLNCW = null;
        var connectLNCH = null;
        var connectURL = null;
        var connectPhoneFormat = null;
        var loginWindow = null;

        var loadACSFIntegration = function () {
          ctx.ACSFIntegration.CallAttributesDisplay.onAgentHandler();
          ctx.ACSFIntegration.CallInformation.onAgentHandler("{!namespaceClassPrefix}");
          ctx.ACSFIntegration.PostCallTask.onAgentHandler("{!namespacePagePrefix}", "{!$Label.ACSFCCP_PostCallTaskTabName}");
        }

        var showLoginScreen = function () {
          document.getElementById('connectcontainer').classList.add('hidden');
          document.getElementById('ccpSoftphoneLogin').classList.remove('slds-hide');
        }

        var showSoftphone = function () {
          document.getElementById('ccpSoftphoneLogin').classList.add('slds-hide');
          document.getElementById('connectcontainer').classList.remove('hidden');
        }

        var setupLoginHandler = function (ccpUrl) {
          connect.getLog().info("ConnectSFCCP:setupLoginHandler invoked");
          document.getElementById('loginButton').addEventListener('click', function () {
            loginWindow = window.open(ccpUrl, 'AmazonConnectLoginWindow', 'width=400, height=520');
          });

          showLoginScreen();
        }

        var onSoftphoneLoginSuccessful = function() {
          connect.getLog().info("ConnectSFCCP:onSoftphoneLoginSuccessful invoked");
          showSoftphone();

          if (loginWindow) {
            loginWindow.close();
            loginWindow = null;
          }
        }

        var cbHeightSet = function(response) {
            if(response.success) {
                connect.getLog().info("ConnectSFCCP:cbHeightSet:OK");
            } else {
                connect.getLog().error("ConnectSFCCP:cbHeightSet:Error:"+ response.errors);
            }
        };

        var cbWidthSet = function(response) {
            if(response.success) {
                connect.getLog().info("ConnectSFCCP:cbWidthSet:OK");
            } else {
                connect.getLog().error("ConnectSFCCP:cbWidthSet:Error:"+ response.errors);
            }
        };

        var cbClickToDial = function(response) {
            if (response.success) {
                connect.getLog().info("ConnectSFCCP:cbClickToDial:OK");
            } else {
                connect.getLog().error("ConnectSFCCP:cbClickToDial:Error:"+ response.errors);
            }
        };

        var onClickListener = function (payload) {
            connect.agent(function(agent) {
                try{
                    connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:" + payload.number);
                    var phoneContact = payload.number;
                    connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:Number:"+ phoneContact);
                    var phoneParsed = libphonenumber.parse(phoneContact, { country: { default: connectPhoneFormat.Country }});
                    connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:Parsed:"+phoneParsed.country+"|"+phoneParsed.phone);
                    var e164PhoneNumber = libphonenumber.format(phoneParsed.phone, phoneParsed.country, connectPhoneFormat.NF);
                    connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:h164Number:"+ e164PhoneNumber);
                    agent.connect(connect.Address.byPhoneNumber(e164PhoneNumber),{});
                    connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:AgentConnect");
                    sforce.opencti.setSoftphonePanelVisibility({visible: true});
                    connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:setVisible");
                    connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:GP:" + agent.getPermissions());
                } catch (e) {
                    connect.getLog().error("ConnectSFCCP:cbInConsole:Agent:Error:").withException(e);
                }
            })
        };

        var cbInConsole = function (response) {
            if (response.success) {
                connect.getLog().info("ConnectSFCCP:cbInConsole:"+ccSettings["/reqConnectSFCCPOptions/reqConnectURL"]);
                connectURL = ccSettings["/reqConnectSFCCPOptions/reqConnectURL"];
                connectCW = ccSettings["/reqConnectSFCCPOptions/reqConnectLW"]+"px";
                connectCH = ccSettings["/reqConnectSFCCPOptions/reqConnectLH"]+"px";
                connectLNCW = ccSettings["/reqConnectSFCCPOptions/reqConnectLCW"];
                connectLNCH = ccSettings["/reqConnectSFCCPOptions/reqConnectLCH"];
                connectPhoneFormat = JSON.parse(ccSettings["/reqConnectSFCCPOptions/reqConnectPhoneFormat"]);
                connect.getLog().info("ConnectSFCCP:cbInConsole:JSContainer:Prefix:"+connectPhoneFormat.OPF+"|"+connectPhoneFormat.NPF+"|"
                        +connectPhoneFormat.Country+"|"+connectPhoneFormat.NF+"|"+connectPhoneFormat.TNF);

                var testnum = libphonenumber.format(connectPhoneFormat.TNF, connectPhoneFormat.Country, connectPhoneFormat.NF);
                connect.getLog().info("ConnectSFCCP:cbInConsoleJSContainer:TestNumber:e164Number:"+ testnum);
                var testnum2 = testnum.replace(/([^0-9])+/g,'');
                connect.getLog().info("ConnectSFCCP:cbInConsole:JSContainer:TestNumber:e164Numberstripped:"+ testnum2);

                connect.getLog().info("ConnectSFCCP:cbInConsole:JSContainer");
                var container = document.getElementById("connectcontainer");
                container.style.width = connectCW;
                container.style.height = connectCH;
                connect.core.initCCP(container, {
                    ccpUrl: connectURL,
                    loginPopup: false,
                    softphone:        {
                        allowFramedSoftphone: true,
                    }
                });

                setupLoginHandler(connectURL);

                connect.contact(function(contact) {
                    try {
                        contact.onConnecting(function() {
                            if (contact.isInbound()) {
                                ctx.ACSFIntegration.ScreenpopManager.onConnecting(contact, connectPhoneFormat);
                                ctx.ACSFIntegration.CallAttributesDisplay.onConnecting(contact);
                            }
                        });
                    } catch (e) {
                        connect.getLog().error("ConnectSFCCP:onConnecting:Error:").withException(e);
                    }

                    try {
                        contact.onAccepted(function() {
                            ctx.ACSFIntegration.CallInformation.onAccepted(contact);
                            ctx.ACSFIntegration.CallAttributesDisplay.onAccepted(contact);
                        });
                    } catch (e) {
                        connect.getLog().error("ConnectSFCCP:onAccepted:Error:").withException(e);
                    }

                    try {
                        contact.onEnded(function() {
                            ctx.ACSFIntegration.CallInformation.onEnded(contact);
                            ctx.ACSFIntegration.CallAttributesDisplay.onEnded(contact);
                        });
                    } catch (e) {
                        connect.getLog().error("ConnectSFCCP:onEnd:Error:").withException(e);
                    }
                });

                connect.agent(function(agent) {
                    try {
                        connect.getLog().info("ConnectSFCCP:GP:" + agent.getPermissions());
                        onSoftphoneLoginSuccessful();
                    }
                    catch (e) {
                        connect.getLog().error("ConnectSFCCP:GP::Error:").withException(e);
                    }
                });

                connect.getLog().info("ConnectSFCCP:cbInConsole:CTD");
                sforce.opencti.enableClickToDial({callback: cbClickToDial});
                connect.getLog().info("ConnectSFCCP:cbInConsole:onClickListener:OK:settingOnClickListener");
                sforce.opencti.onClickToDial({listener: onClickListener});
                connect.getLog().info("ConnectSFCCP:cbInConsole:SFHW H:"+connectLNCH+ " W:"+connectLNCW+" CH:"+connectCH+" CW:"+connectCW);
                sforce.opencti.setSoftphonePanelHeight({heightPX: parseInt(connectLNCH), callback: cbHeightSet});
                sforce.opencti.setSoftphonePanelWidth({widthPX: parseInt(connectLNCW), callback: cbWidthSet});

                loadACSFIntegration();
            }
            else {
                connect.getLog().info("ConnectSFCCP:cbInConsole:Error");
            }
        };

        var cbGetPageInfo = function (response) {
            if (response.success) {
                connect.getLog().info("ConnectSFCCP:cbGetPageInfo:"+ response.returnValue);
            } else {
                connect.getLog().error("ConnectSFCCP:cbGetPageInfo:Error:"+ response.errors);
            }
        };

        var cbCCSettings = function (response) {
            if (response.success) {
                connect.getLog().info("ConnectSFCCP:cbCCSettings:OK:" + response.success);
                ccSettings = response.returnValue;
                cbInConsole(response);
            }
            else {
                connect.getLog().error("ConnectSFCCP:cbCCSettings:Error:"+ response.errors);
            }
        };

        try {
            connect.getLog().info("ConnectSFCCP:Initialization:getCCSettings");
            sforce.opencti.getCallCenterSettings({callback: cbCCSettings});
        } catch (e) {
            connect.getLog().error("ConnectSFCCP:Initialization:getCCSettings :Error:").withException(e);
        }
      })(this);
    </script>
  </html>
</apex:page>
